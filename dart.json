{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"ItemManager": {
		"prefix": "ItemManager",
		"body": [
		  "class ${1:Item}Manager extends ChangeNotifier {",
		  "  List<${1:Item}Model>? _sortedEntries = <${1:Item}Model>[];",
		  "  final Map<String, ${1:Item}Model> _byId = {};",
		  "",
		  "  /// Returns an unmodifiable copy of all known [ItemModel] objects.",
		  "  List<${1:Item}Model> get entries {",
		  "    // Restore the cached sorted list if necessary.",
		  "    _sortedEntries ??= _byId.values.toList()",
		  "      ..sort((a, b) => a.date.compareTo(b.date));",
		  "",
		  "    // Now, return an unmodifiable list for the UI to render.",
		  "    return List.unmodifiable(_sortedEntries!);",
		  "  }",
		  "",
		  "  void deleteItem(${1:Item}Model item) {",
		  "    _byId.remove(item.id);",
		  "    _sortedEntries = null;",
		  "    notifyListeners();",
		  "  }",
		  "",
		  "  ${1:Item}Model? getItem(String id) => _byId[id];",
		  "",
		  "  void setItem(${1:Item}Model item) {",
		  "    _byId[item.id] = item;",
		  "    _sortedEntries = null;",
		  "    notifyListeners();",
		  "  }",
		  "}"
		],
		"description": "ItemManager"
	  },

	  "GoRouterRedirector": {
		"prefix": "GoRouterRedirector",
		"body": [
		  "// redirect: (GoRouterState state) {",
		  "//    return GoRouterRedirector.instance.redirect(state, appStateManager);//",
		  "// },",
		  "",
		  "class GoRouterRedirector {",
		  "  const GoRouterRedirector(this._redirects);",
		  "  final List<Redirect> _redirects;",
		  "",
		  "  static GoRouterRedirector get instance => GoRouterRedirector([",
		  "        // examples of redirections",
		  "        UninitializedRedirect(), // if isInitialized != true",
		  "        OnInitializationRedirect(), // if isInitialized == true",
		  "      ]);",
		  "",
		  "  String? redirect(GoRouterState state, AppStateManager manager) {",
		  "    final current = Uri(path: state.subloc, queryParameters: state.queryParams);",
		  "    for (final redirect in _redirects) {",
		  "      if (redirect.predicate(state, manager)) {",
		  "        final uri = redirect.getNewUri(state, manager);",
		  "        if (uri != null) {",
		  "          final uriString = uri.toString();",
		  "",
		  "          if (uriString == current.toString()) {",
		  "            // ignore: avoid_print",
		  "            // print('$redirect attempted to redirect to itself at $uriString');",
		  "            return null;",
		  "          }",
		  "",
		  "          // ignore: avoid_print",
		  "          //print('$redirect redirecting from ${current.toString()} to ' +",
		  "             // uriString);",
		  "          return uriString;",
		  "        }",
		  "      }",
		  "    }",
		  "    return null;",
		  "  }",
		  "}",
		  "",
		  "abstract class Redirect {",
		  "  /// Determines whether this redirection should take place.",
		  "  bool predicate(GoRouterState state, AppStateManager manager);",
		  "",
		  "  /// Returns an optional `Uri` instance if there is a redirect. This",
		  "  /// can return Null because `predicate` may return true if it knows there is",
		  "  /// zero chance any future redirect should be checked. For example, if the",
		  "  /// app is not initialized, you may know that your only possible redirect is",
		  "  /// *to* the splash screen. However, if you are already there, [getNewUri]",
		  "  /// will return null.",
		  "  Uri? getNewUri(GoRouterState state, AppStateManager manager);",
		  "}",
		  ""
		],
		"description": "GoRouterRedirector"
	  }
}